@model PaginatedList<WildPath.EfModels.Item>

@{
    ViewData["Title"] = "ShopAll";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Shop All</h1>

<div id="paypal-button-container">
    <form asp-action="ShopAll" method="get">
        <div class="form-group" style="display: inline-block">
            <span>Search:</span>
            <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
            <input type="submit" value="Search" class="btn btn-primary" />
        </div>
    </form>

    @if (Model.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>
                        @Html.DisplayNameFor(model => model.First().Supplier)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().ItemName)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().ItemDetails)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().Price)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().Category)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().Weight)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().Size)
                    </th>
                    <th>
                        @Html.DisplayNameFor(model => model.First().Colour)
                    </th>
                    <th>Actions</th> <!-- Added for add/remove buttons -->
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>
                            @Html.DisplayFor(modelItem => item.Supplier)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ItemName)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.ItemDetails)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Price)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Category)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Weight)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Size)
                        </td>
                        <td>
                            @Html.DisplayFor(modelItem => item.Colour)
                        </td>
                        <td>
                            @if (User.Identity.IsAuthenticated)
                            {
                                <button onclick="AddOne('@item.PkItemId', @item.Price)">Add</button>
                                <button onclick="MinusOne('@item.PkItemId', @item.Price)">Remove</button>
                                <span id="total_@item.PkItemId">0</span> 
                            }
                        </td>
                    </tr>
                }
            </tbody>
        </table>

        <!-- Pagination -->
        <nav>
            <ul class="pagination">
                <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                    <a class="page-link"
                       href="@Url.Action("ShopAll", new { searchString = ViewData["SearchString"], pageNumber = Model.PageIndex - 1 })">
                        Previous
                    </a>
                </li>
                <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                    <a class="page-link"
                       href="@Url.Action("ShopAll", new { searchString = ViewData["SearchString"], pageNumber = Model.PageIndex + 1 })">
                        Next
                    </a>
                </li>
            </ul>
        </nav>
    }
    else
    {
        <p>No items found.</p>
    }

    <div>
        <a asp-action="ShopAll" class="btn btn-primary">Back to List</a>
    </div>
</div>

<!-- Total quantity and price display -->
<div>
    <span>Total Quantity:</span>
    <span id="totalQuantity">0</span>
    <br />
    <span>Total Price:</span>
    <span id="totalPrice">0</span>
</div>


<script src="https://www.paypal.com/sdk/js?client-id=AcBnAsIJmldpwwq_VnVJuZz8K7PhPwWM3MYUcNw38oL5egs8hH8e2NVSEFrEAsROQQegDbnQnV0gABkT"></script>

<script>
    paypal.Buttons({
        // Set up the transaction
        createOrder: function (data, actions) {
            return actions.order.create({
                purchase_units: [{
                    amount: {
                        value: document.getElementById('itemPrice').value,
                        currency:
                            document.getElementById('currency').value
                    }
                }]
            });
        },

        // Finalize the transaction
        onApprove: function (data, actions) {
            return actions.order.capture().then(function (details) {


                // Redirect to the PayPalConfirmation action method
                window.location.href =
                    '/Home/PayPalConfirmation?TransactionId=' +
                    encodeURIComponent(details.id) + '&Amount=' +
                    encodeURIComponent(details.purchase_units[0]
                        .amount.value) + '&PayerName=' +
                    encodeURIComponent(details.payer.name.given_name);
            });
        },


        onCancel: function (data) {
            alert('Transaction was cancelled.');
        },
        onError: function (err) {
            alert('An error occurred during the transaction.');
        },
        style: {
            layout: 'vertical', // 'vertical', 'horizontal'
            color: 'blue',      // 'gold', 'blue', 'silver', 'black'
            shape: 'rect',      // 'rect', 'pill'
            label: 'paypal'     // 'checkout', 'pay', 'buynow', 'paypal'
        }
    }).render('#paypal-button-container');
</script>

<script>
    function AddOne(id, price) {
        var totalItems = document.getElementById("total_" + id);
        var total = parseInt(totalItems.textContent);
        total += 1;
        totalItems.textContent = total;

        // Assuming you have a way to retrieve the price of each item based on its id
        // var price = getPriceById(id);
        var finalPrice = total * price;

        var totalAmount = document.getElementById("amount_" + id);
        totalAmount.textContent = `${finalPrice.toLocaleString('en-CA', { style: 'currency', currency: 'CAD' })} CAD`;

        var runningQuantityDoc = document.getElementById("totalQuantity");
        var intRunningQuantity = parseInt(runningQuantityDoc.textContent);

        var runningTotalDoc = document.getElementById("totalPrice");
        var intRunningTotal = parseFloat(runningTotalDoc.textContent);

        // Update running total price and quantity
        intRunningTotal += price; // Add the price of the item
        intRunningQuantity += 1;

        runningTotalDoc.textContent = intRunningTotal.toFixed(2);
        runningQuantityDoc.textContent = intRunningQuantity;
    }


    function MinusOne(id, price) {
        var totalItems = document.getElementById("total_" + id);
        var total = parseInt(totalItems.textContent);

        // If the total quantity of the item is already 0, return
        if (total === 0) {
            return;
        }

        total -= 1;
        totalItems.textContent = total;

        // Assuming you have a way to retrieve the price of each item based on its id
        // var price = getPriceById(id);
        var finalPrice = total * price;

        var totalAmount = document.getElementById("amount_" + id);
        totalAmount.textContent = `${finalPrice.toLocaleString('en-CA', { style: 'currency', currency: 'CAD' })} CAD`;

        var runningQuantityDoc = document.getElementById("totalQuantity");
        var intRunningQuantity = parseInt(runningQuantityDoc.textContent);

        var runningTotalDoc = document.getElementById("totalPrice");
        var intRunningTotal = parseFloat(runningTotalDoc.textContent);

        // Update running total price and quantity
        intRunningTotal -= price; // Subtract the price of the item
        intRunningQuantity -= 1;

        runningTotalDoc.textContent = intRunningTotal.toFixed(2);
        runningQuantityDoc.textContent = intRunningQuantity;
    }

</script>