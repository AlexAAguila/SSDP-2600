@model PaginatedList<WildPath.EfModels.Item>
@{
    ViewData["Title"] = "ShopAll";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h1>Shop All</h1>
<div>
    <form asp-action="ShopAll" method="get">
        <div class="form-group" style="display: inline-block">
            <span>Search:</span>
            <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
            <input type="submit" value="Search" class="btn btn-primary" />
        </div>
    </form>
    @if (Model.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Supplier</th>
                    <th>Item Name</th>
                    <th>Item Details</th>
                    <th>Price</th>
                    <th>Category</th>
                    <th>Weight</th>
                    <th>Size</th>
                    <th>Colour</th>
                    <th>Action</th> 
                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Supplier)</td>
                        <td>@Html.DisplayFor(modelItem => item.ItemName)</td>
                        <td>@Html.DisplayFor(modelItem => item.ItemDetails)</td>
                        <td>@Html.DisplayFor(modelItem => item.Price)</td>
                        <td>@Html.DisplayFor(modelItem => item.Category)</td>
                        <td>@Html.DisplayFor(modelItem => item.Weight)</td>
                        <td>@Html.DisplayFor(modelItem => item.Size)</td>
                        <td>@Html.DisplayFor(modelItem => item.Colour)</td>
                        <td>
                            <div>
                                <button id="addButton_@item.PkItemId" class="btn btn-primary mb-1"
                                        onclick="AddOne('@item.PkItemId')"
                                        data-price="@item.Price">
                                    Add To Cart
                                </button>
                                <button id="removeButton_@item.PkItemId" class="btn btn-primary"
                                        style="border-color:#6E0B14; background-color: #6E0B14;"
                                        onclick="RemoveOne('@item.PkItemId')"
                                        data-price="@item.Price">
                                    Remove from Cart
                                </button>
                            </div>
                            <div>
                                <table class="table">
                                    <thead>
                                        <tr>
                                            <th>Qty</th>
                                            <th>Amount</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td><span id="total_@item.PkItemId">0</span></td>
                                            <td>$<span id="amount_@item.PkItemId">0.00</span></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="cart-summary">
            <h3>Cart Summary</h3>
            <p>Total Items: <span id="totalItems"></span></p>
            <p>Grand Total: $<span id="grandTotal">0.00</span></p>
            <input id="currency" type="hidden" value="CAD" />
        </div>
        <div id="paypal-button-container">
            @* PayPal button will be rendered here by the script below *@
        </div>
        @* Pagination  *@
        <nav>
            <ul class="pagination">
                <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                    <a class="page-link"
                       href="@Url.Action("ShopAll", new { sortOrder = ViewData["CurrentSort"], searchString = ViewData["SearchString"], pageNumber = Model.PageIndex - 1 })">
                        Previous
                    </a>
                </li>
                <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                    <a class="page-link"
                       href="@Url.Action("ShopAll", new { sortOrder = ViewData["CurrentSort"], searchString = ViewData["SearchString"], pageNumber = Model.PageIndex + 1 })">
                        Next
                    </a>
                </li>
            </ul>
        </nav>
    }
    else
    {
        <p>No items found.</p>
    }
    <div>
        <a asp-action="ShopAll" class="btn btn-primary">Back to List</a>
    </div>
</div>
<script src="https://www.paypal.com/sdk/js?client-id=AcBnAsIJmldpwwq_VnVJuZz8K7PhPwWM3MYUcNw38oL5egs8hH8e2NVSEFrEAsROQQegDbnQnV0gABkT"></script>
<script>
    function AddOne(id) {
        var totalElement = document.getElementById('total_' + id);
        var amountElement = document.getElementById('amount_' + id);
        var addButton = document.getElementById('addButton_' + id);
        var pricePerItem = parseFloat(addButton.getAttribute('data-price'));
        var total = parseInt(totalElement.textContent);
        if (isNaN(total)) {
            total = 0; // Start from zero if it's not a number
        }
        total += 1;
        totalElement.textContent = total;
        amountElement.textContent = (total * pricePerItem).toFixed(2);
        updateCartSummary();

        fetch('/Transaction/AddToCart?id='+id, {
            method: 'GET',
            headers: {
                // 'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
             }
             //,
            // body: JSON.stringify({ id: 1 })
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json(); // Parse the response body as JSON
            })
            .then(data => {
                // Handle the JSON data returned from the server
                console.log(data); // Example output: { Name: "John Doe", Age: 30, Occupation: "Software Developer" }

                // Manipulating the DOM based on the response
                // document.getElementById('personName').textContent = data.Name;
                // document.getElementById('personAge').textContent = data.Age;
                // document.getElementById('personOccupation').textContent = data.Occupation;
            })
            .catch(error => {
                // Handle errors
                console.error('Fetch error:', error);
            });



    }
    function RemoveOne(id) {
        var totalElement = document.getElementById('total_' + id);
        var amountElement = document.getElementById('amount_' + id);
        var removeButton = document.getElementById('removeButton_' + id);
        var pricePerItem = parseFloat(removeButton.getAttribute('data-price'));
        var total = parseInt(totalElement.textContent);
        if (isNaN(total)) {
            total = 0; // Prevent going negative if it's not a number
        } else {
            total -= 1;
        }
        if (total < 0) {
            total = 0;
        }
        totalElement.textContent = total;
        amountElement.textContent = (total * pricePerItem).toFixed(2);
        updateCartSummary();
    }
    function updateCartSummary() {
        var totalItems = 0;
        var grandTotal = 0.0;
        // Loop through all total elements and sum them up
        document.querySelectorAll('[id^="total_"]').forEach(function (element) {
            totalItems += parseInt(element.textContent) || 0;
        });
        // Loop through all amount elements and sum them up
        document.querySelectorAll('[id^="amount_"]').forEach(function (element) {
            grandTotal += parseFloat(element.textContent) || 0;
        });
        // Update the cart summary display
        document.getElementById('totalItems').textContent = totalItems;
        document.getElementById('grandTotal').textContent = grandTotal.toFixed(2);
    }
    paypal.Buttons({
        // Set up the transaction
        createOrder: function (data, actions) {
            return actions.order.create({
                purchase_units: [{
                    amount: {
                        value: document.getElementById('itemPrice').value,
                        currency:
                            document.getElementById('currency').value
                    }
                }]
            });
        },
        // Finalize the transaction
        onApprove: function (data, actions) {
            return actions.order.capture().then(function (details) {
                // Redirect to the PayPalConfirmation action method
                window.location.href =
                    '/Home/PayPalConfirmation?TransactionId=' +
                    encodeURIComponent(details.id) + '&Amount=' +
                    encodeURIComponent(details.purchase_units[0]
                        .amount.value) + '&PayerName=' +
                    encodeURIComponent(details.payer.name.given_name);
            });
        },
        onCancel: function (data) {
            alert('Transaction was cancelled.');
        },
        onError: function (err) {
            alert('An error occurred during the transaction.');
        },
        style: {
            layout: 'vertical', // 'vertical', 'horizontal'
            color: 'blue',      // 'gold', 'blue', 'silver', 'black'
            shape: 'rect',      // 'rect', 'pill'
            label: 'paypal'     // 'checkout', 'pay', 'buynow', 'paypal'
        }
    }).render('#paypal-button-container');
</script>
