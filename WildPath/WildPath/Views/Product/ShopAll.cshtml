@model PaginatedList<WildPath.EfModels.Item>
@{
    ViewData["Title"] = "ShopAll";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<h1>Shop All</h1>
<div>
    <form asp-action="ShopAll" method="get">
        <div class="form-group" style="display: inline-block">
            <span>Search:</span>
            <input type="text" name="SearchString" value="@ViewData["currentFilter"]" />
            <input type="submit" value="Search" class="btn btn-primary" />
        </div>
    </form>
    @if (Model.Any())
    {
        <table class="table">
            <thead>
                <tr>
                    <th>Supplier</th>
                    <th>Item Name</th>
                    <th>Item Details</th>
                    <th>Price</th>
                    <th>Category</th>
                    <th>Weight</th>
                    <th>Size</th>
                    <th>Colour</th>
@*                     <th>Action</th> 
 *@                </tr>
            </thead>
            <tbody>
                @foreach (var item in Model)
                {
                    <tr>
                        <td>@Html.DisplayFor(modelItem => item.Supplier)</td>
                        <td>
                            <a asp-action="Details" asp-route-id="@item.PkItemId">@Html.DisplayFor(modelItem => item.ItemName)</a>
                        </td>
                        <td>@Html.Raw(item.ItemDetails.Replace("\n", "<br/>"))</td>
                        <td>@Html.DisplayFor(modelItem => item.Price)</td>
                        <td>@Html.DisplayFor(modelItem => item.Category)</td>
                        <td>@Html.DisplayFor(modelItem => item.Weight)</td>
                        <td>@Html.DisplayFor(modelItem => item.Size)</td>
                        <td>@Html.DisplayFor(modelItem => item.Colour)</td>
                        <td>
                            <div>
                          
                            
                            </div>
                            <div>
                                <table class="table" type="hidden" style="display: none;">
                                    <thead>
                                        <tr>
                                            <th type="hidden">Qty</th>
                                            <th type="hidden">Amount</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td type="hidden"><span id="total_@item.PkItemId">0</span></td>
                                            <td type="hidden">$<span id="amount_@item.PkItemId">0.00</span></td>
                                        </tr>
                                    </tbody>
                                </table>
                            </div>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
        <div class="cart-summary" style="display: none;">
            <h3>Cart Summary</h3>
            <p type="hidden">Total Items: <span id="totalItems"></span></p>
            <p type="hidden">Grand Total: $<span id="grandTotal">0.00</span></p>
            <input id="currency" type="hidden" value="CAD" />
        </div>
@*         <div id="paypal-button-container">
            @* PayPal button will be rendered here by the script below
    </div> *@
        <nav>
            <ul class="pagination">
                <li class="page-item @(Model.HasPreviousPage ? "" : "disabled")">
                    <a class="page-link"
                       href="@Url.Action("ShopAll", new { sortOrder = ViewData["CurrentSort"], searchString = ViewData["SearchString"], pageNumber = Model.PageIndex - 1 })">
                        Previous
                    </a>
                </li>
                <li class="page-item @(Model.HasNextPage ? "" : "disabled")">
                    <a class="page-link"
                       href="@Url.Action("ShopAll", new { sortOrder = ViewData["CurrentSort"], searchString = ViewData["SearchString"], pageNumber = Model.PageIndex + 1 })">
                        Next
                    </a>
                </li>
            </ul>
        </nav>
        <button id="shoppingCartButton" class="btn btn-primary mb-1">
            <a class="nav-link text-dark" asp-area="" asp-controller="Product" asp-action="ShoppingCart" >Go To Cart</a>

        </button>
    }
    else
    {
        <p>No items found.</p>
    }
    <div>
        <a asp-action="ShopAll" class="btn btn-primary">Back to List</a>
    </div>
</div>
<script src="https://www.paypal.com/sdk/js?client-id=AcBnAsIJmldpwwq_VnVJuZz8K7PhPwWM3MYUcNw38oL5egs8hH8e2NVSEFrEAsROQQegDbnQnV0gABkT"></script>
<script>
    // function AddOne(id) {
    //     var totalElement = document.getElementById('total_' + id);
    //     var amountElement = document.getElementById('amount_' + id);
    //     var addButton = document.getElementById('addButton_' + id);
    //     var qtyAmount = document.getElementById('QtyAmount_' + id).value;

    //     var pricePerItem = parseFloat(addButton.getAttribute('data-price'));
    //     var total = parseInt(totalElement.textContent);
    //     if (isNaN(total)) {
    //         total = 0; // Start from zero if it's not a number
    //     }
    //     if (qtyAmount > 0 && !NaN && !null) {
    //         console.log("qty:", qtyAmount);

    //         var quantity = parseInt(qtyAmount.value); // Parse the quantity input value
    //         console.log("Quantity:", quantity); // Check the quantity value in the console

    //         total += quantity; // Add the parsed quantity to the total
    //         totalElement.textContent = total;
    //         amountElement.textContent = (total * pricePerItem).toFixed(2);

    //         console.log("TOTAL", total);

    //         fetch('/Transaction/AddToCart?id=' + id + '&quantity=' + qtyAmount, {
    //             method: 'GET',
    //             headers: {
    //                 'X-Requested-With': 'XMLHttpRequest'
    //             }
    //         })
    //             .then(response => {
    //                 if (!response.ok) {
    //                     throw new Error('Network response was not ok');
    //                 }
    //                 return response.json(); // Parse the response body as JSON
    //             })
    //             .then(data => {
    //                 console.log(data); // Log the data returned from the server
    //             })
    //             .catch(error => {
    //                 console.error('Fetch error:', error);
    //             });

    //         updateCartSummary();
    //     }
    // }


    // function RemoveOne(id) {
    //     var totalElement = document.getElementById('total_' + id);
    //     var amountElement = document.getElementById('amount_' + id);
    //     var removeButton = document.getElementById('removeButton_' + id);
    //     var pricePerItem = parseFloat(removeButton.getAttribute('data-price'));
    //     var total = parseInt(totalElement.textContent);
    //     if (isNaN(total)) {
    //         total = 0; // Prevent going negative if it's not a number
    //     } else {
    //         total -= 1;
    //     }
    //     if (total < 0) {
    //         total = 0;
    //     }
    //     totalElement.textContent = total;
    //     amountElement.textContent = (total * pricePerItem).toFixed(2);
    //     updateCartSummary();
    // }
    // function updateCartSummary() {
    //     console.log("THIS IS!!!")
    //     var totalItems = 0;
    //     var grandTotal = 0.0;

    //     console.log("GRANDTOTAL BEFORE", grandTotal)
    //     // Loop through all total elements and sum them up
    //     document.querySelectorAll('[id^="total_"]').forEach(function (element) {
    //         totalItems += parseInt(element.textContent) || 0;
    //     });
    //     // Loop through all amount elements and sum them up
    //     document.querySelectorAll('[id^="amount_"]').forEach(function (element) {
    //         grandTotal += parseFloat(element.textContent) || 0;
    //     });
    //     // Update the cart summary display
    //     document.getElementById('totalItems').textContent = totalItems;
    //     document.getElementById('grandTotal').textContent = grandTotal.toFixed(2);
    //     console.log("GRANDTOTAL AFTER", grandTotal)
    // }
  
</script>
