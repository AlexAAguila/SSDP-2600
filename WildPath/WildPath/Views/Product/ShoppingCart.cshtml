@model List<WildPath.ViewModels.CartItemVM>

@{
    ViewData["Title"] = "ShoppingCart";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>

    html, body, .container, div {
        margin: 0;
        padding: 0;
    }

    .grey-header {
        background-color: rgba(217, 217, 217, 0.5);
        color: black;
        text-align: center;
        padding: 10px 0;
        font-size: 15px;
        margin-top: -15px;
    }

    .bold-text {
        font-weight: bold;
    }

    .container {
        max-width: 100%;
        margin: 0 auto;
    }

    .component {
        margin: 30px;
    }

    .cart-summary{
        display:flex;
        flex-direction:column;
        justify-content:center;
        border: 1px solid #0000001f;
        border-radius:20px;
        padding:2rem;
        margin:2rem 1rem;
    }

    .cart-summary h3{
       align-self:center;

    }
   

    .cart-box{
        display:flex;
        justify-content:flex-start;
        gap:2rem;
        

    }

    .custom-alert {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .custom-alert-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
    }

    .custom-alert-close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .custom-alert-close:hover,
        .custom-alert-close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }

      #quantity {
        width: 30px;
        text-align: center;
    }

    .quantity-controls {
        display: flex;
        border: 1px solid #ccc;
        border-radius: 2px;
    }

    .quantity-controls button {
        background-color: transparent;
        border: none;
        padding: 0 5px;
        cursor: pointer;
    }

    .quantity-controls input {
        border: none;
        width: 40px;
        text-align: center;
    }

    .quantity-controls button:hover {
        background-color: #f0f0f0;
    }

    .quantity-controls button, .quantity-controls input {
        height: 25px;
    }

    .details-quantity{
        width:80px;
    }

    .controls-wrapper{
        display:flex;
        align-items:center;
        gap:1rem;
    }

       @@media (min-width: 768px) { 
       .cart-summary{
           margin:3rem 10rem;
       }

        .component {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
       }

        @@media (min-width: 980px) {
        .cart-summary {
            width:30%;
        }

        .component{
        display: flex;
        flex-direction: row;
        align-items: center;
        }
    }
</style>


<div>
    <div class="grey-header">
        <span class="bold-text">Your Shopping Cart</span>
    </div>
    <div class="component">
        <br />
        <hr />
        @if (Model.Any())
        {
            <table class="table">

                <tbody>
                    @foreach (var item in Model)
                    {
                        var imageBase64 = "";
                        var imageAltText = "Product Image";
                        var image = item.ImageStore;
                        var productUrl = Url.Action("Details", new { id = item.ItemId });
                        var placeholderImagePath = Url.Content("~/images/placeholder.jpeg");

                        if (image != null && image.ImageId.ToString() == item.ImageStore.ImageId.ToString())
                        {
                            imageBase64 = Convert.ToBase64String(image.Image);
                            imageAltText = image.FileName;
                        }
                        else
                        {
                            placeholderImagePath = Url.Content("~/images/placeholder.jpeg");
                        }



                        <tr>
                            <td colspan="2" style="width:100%; padding:10px;">
                                <div class="row">
                                    <!-- Image column -->
                                    <div class="col-5 d-flex justify-content-center align-items-center" style="padding-right:10px;">
                                        @if (!String.IsNullOrEmpty(imageBase64))
                                        {
                                            <img src="data:image/jpeg;base64,@imageBase64" alt="@imageAltText" style="width:15rem; height:auto;" />
                                        }
                                        else
                                        {
                                            <img src="@Url.Content("~/images/placeholder.jpeg")" alt="Placeholder Image" style="width:15rem; height:auto;" />
                                        }
                                    </div>

                                    <!-- Details column -->
                                    <div class="col-7" style="display:flex; flex-direction:column; justify-content:center;">
                                        <h4>@item.ItemName</h4>


                                        <div class="cart-box">
                                            <p>@item.Size</p>
                                            <p>@item.Colour</p>
                                            <p><span id="total_@item.ItemId">@item.Quantity</span></p>
                                        </div>
                                        <p>$<span id="amount_@item.ItemId">@((item.Quantity * item.Price).ToString("N2"))</span></p>
                                        <div class="col-md-12">
                                            <div class="details-quantity">
                                                <div class="quantity-label">
                                                    <label for="quantity-@item.ItemId">Quantity:</label>
                                                </div>
                                                <div class="controls-wrapper">
                                                    <div class="quantity-controls">
                                                        <button id="removeButton_@item.ItemId" onclick="RemoveOne('@item.ItemId')">-</button>

                                                        <input type="text" id="quantity_@item.ItemId" value="@item.Quantity" readonly>


                                                        <button id="addButton_@item.ItemId" data-price="@item.Price" onclick="AddOne('@item.ItemId')">+</button>

                                                    </div>
                                                    <button class="btn btn-primary mb-1" onclick="removeFromCart('@item.ItemId', '@item.ItemName')">Remove</button>
                                                </div>
                                            </div>
                                        </div>




                                    </div>
                                </div>
                            </td>
                        </tr>

                    }
                </tbody>
            </table>
            <div id="customAlert" class="custom-alert">
                <div class="custom-alert-content">
                    <span class="custom-alert-close" onclick="closeCustomAlert()">&times;</span>
                    <p id="customAlertMessage"></p>
                </div>
            </div>
            <br/><br/>
            <div class="cart-summary">
                <h3>Order Summary</h3>
                <hr />
                <p>Total Items: <span id="totalItems"></span></p>
                <hr />
                <p>Subtotal: $<span id="grandTotal">0.00</span></p>
                <hr />
                <p>Tax will be calculated once the shipping address has been confirmed.</p>
                <div style="display:flex;justify-content:center;">
                    <div style="display:flex;justify-content:center;width:100%">
                        <a href="@Url.Action("Checkout", "Transaction")" class="btn btn-success" style="width:100%">Proceed to checkout</a>
                    </div>
                </div>

            </div>


        }
        else
        {
            <br />

            <br />
            <p style="text-align: center">No cool camping items found :( </p>

        }

    </div>

    </div>

<br />
<br />
<br />
<br />

<br />
    
<script>
 


    function updateCartSummary() {
        var totalItems = 0;
        var grandTotal = 0.0;

        // Loop through all quantity elements and sum them up
        document.querySelectorAll('[id^="total_"]').forEach(function (element) {
            var quantity = parseInt(element.textContent) || 0;
            totalItems += quantity;

            // Get the corresponding amount element by replacing 'total_' with 'amount_'
            var amountId = element.id.replace('total_', 'amount_');
            var amountElement = document.getElementById(amountId);

            // Extract the numerical value from the amountElement's textContent
            var amount = parseFloat(amountElement.textContent.replace(/[^0-9.]/g, '')) || 0;
            grandTotal += amount;
        });

        // Update the cart summary display
        document.getElementById('totalItems').textContent = totalItems;
        document.getElementById('grandTotal').textContent = grandTotal.toFixed(2);   
      
    }

    function showCustomAlert(message, itemName) {
        document.getElementById('customAlertMessage').innerText = ` ${itemName} ${message}`;
        document.getElementById('customAlert').style.display = 'block';
    }

    function closeCustomAlert() {
        document.getElementById('customAlert').style.display = 'none';
        updateCartSummary();
        window.location.reload();
    }


    function AddOne(id) {
        var totalElement = document.getElementById('total_' + id);
        var amountElement = document.getElementById('amount_' + id);
        var addButton = document.getElementById('addButton_' + id);
        var quantityInput = document.getElementById('quantity_' + id); 
        var quantity = parseInt(quantityInput.value);

        var pricePerItem = parseFloat(addButton.getAttribute('data-price'));
        var total = parseInt(totalElement.textContent);
        if (isNaN(total)) {
            total = 0; // Start from zero if it's not a number
           
        }
        total += 1;
        totalElement.textContent = total;
        quantityInput.value = total; 
        amountElement.textContent = (total * pricePerItem).toFixed(2);
        fetch('/Transaction/AddToCart?id=' + id + '&quantity=' + quantity, {

            method: 'GET',
            headers: {
                // 'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
         
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json(); // Parse the response body as JSON
            })
            .then(data => {
                


            })
            .catch(error => {
                // Handle errors
                console.error('Fetch error:', error);
            });

        updateCartSummary();

    }

function RemoveOne(id) {
    var totalElement = document.getElementById('total_' + id);
    var amountElement = document.getElementById('amount_' + id);
    var quantityInput = document.getElementById('quantity_' + id); // Ensure this targets the specific item's quantity input
    var addButton = document.getElementById('addButton_' + id);

    var pricePerItem = parseFloat(addButton.getAttribute('data-price'));
    var total = parseInt(totalElement.textContent);
    if (isNaN(total)) { total = 0; }

    // Check if total is greater than 0 before decrementing
    if (total > 0) {
        total -= 1; // Decrement only if above 0
        totalElement.textContent = total;
        quantityInput.value = total; // Update the input field to the new total
        amountElement.textContent = (total * pricePerItem).toFixed(2);

        // Logic to handle the server-side update and UI refresh
        fetch('/Transaction/RemoveOneFromCart?id=' + id, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
        .then(response => {
            if (!response.ok) {
                throw new Error('Network response was not ok');
            }
            return response.json();
        })
        .then(data => {
            // Handle successful response
            updateCartSummary();
        })
        .catch(error => {
            console.error('Fetch error:', error);
        });
    } else {
        // Optionally, provide feedback to the user that the quantity cannot be reduced further
        console.log("Item quantity cannot be less than 0.");
        // Or, use your custom alert function to notify the user
        // showCustomAlert("Cannot reduce the quantity below 0.", "Notice");
    }
}

   // Function to remove an item from the cart
    function removeFromCart(itemId, itemName) {
        fetch('/Transaction/RemoveToCart?id=' + itemId, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
             .then(data => {
                showCustomAlert('has been removed! ', itemName);
            })            
            .catch(error => {
                console.error('Fetch error:', error);
            });
    }


    // Fetch the cart state and update the UI on page load
    document.addEventListener('DOMContentLoaded', function () {
        fetch('/Transaction/GetCartState')
            .then(response => response.json())
            .then(cartItems => {
                cartItems.forEach(item => {
                   
                    var totalElement = document.getElementById('total_' + item.ItemId);
                    var amountElement = document.getElementById('amount_' + item.ItemId);
                    if (totalElement && amountElement) {
                        totalElement.textContent = item.Quantity;
                        amountElement.textContent = item.Amount.toFixed(2);
                    }
                });
                // After updating the UI with cart state, update the cart summary
                updateCartSummary();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    });

</script>

