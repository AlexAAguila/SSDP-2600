@model List<WildPath.ViewModels.CartItemVM>

@{
    ViewData["Title"] = "ShoppingCart";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
<style>
    .cart-summary{
        display:flex;
        flex-direction:column;
        justify-content:center;
        align-items:center;
        border: 1px solid #0000001f;
        border-radius:5px;
        padding:1rem;
        margin:1rem;
    }

    .cart-box{
        display:flex;
        justify-content:flex-start;
        gap:2rem;
        

    }

    .custom-alert {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0,0,0,0.4);
    }

    .custom-alert-content {
        background-color: #fefefe;
        margin: 15% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 500px;
    }

    .custom-alert-close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

        .custom-alert-close:hover,
        .custom-alert-close:focus {
            color: #000;
            text-decoration: none;
            cursor: pointer;
        }
</style>



<hr/>

<div>
    @if (Model.Any())
    {
        <table class="table">
            <thead>
              @*   <tr>
                    <th>Image</th>
                    <th>Item Name</th>
                    <th>Price</th>
                    <th>Category</th>
                    <th>Size</th>
                    <th>Colour</th>
                    <th>Qty</th>
                    <th>Amount</th>
                    <th>Action</th>
                </tr> *@
            </thead>
           
            <tbody>
                @foreach (var item in Model)
                {
                    var imageBase64 = "";
                    var imageAltText = "Product Image";
                    var image = item.ImageStore; // Adjust according to your CartItemVM structure
                    var productUrl = Url.Action("Details", new { id = item.ItemId }); // Adjust if needed
                    var placeholderImagePath = Url.Content("~/images/placeholder.jpeg");

                    if (image != null && image.ImageId.ToString() == item.ImageStore.ImageId.ToString())
                    {
                        imageBase64 = Convert.ToBase64String(image.Image);
                        imageAltText = image.FileName;
                    }
                    else
                    {
                        placeholderImagePath = Url.Content("~/images/placeholder.jpeg");
                    }

              

                    <tr>
                        <td colspan="2" style="width:100%; padding:10px;">
                            <div class="row">
                                <!-- Image column -->
                                <div class="col-5" style="padding-right:10px;">
                                    @if (!String.IsNullOrEmpty(imageBase64))
                                    {
                                        <img src="data:image/jpeg;base64,@imageBase64" alt="@imageAltText" style="width:100%; height:auto;" />
                                    }
                                    else
                                    {
                                        <img src="@Url.Content("~/images/placeholder.jpeg")" alt="Placeholder Image" style="width:100%; height:auto;" />
                                    }
                                </div>

                                <!-- Details column -->
                                <div class="col-7" style="display:flex; flex-direction:column; justify-content:center;">
                                    <h4>@item.ItemName</h4>
                                  
                                
                                    <div class="cart-box">
                                    <p>@item.Size</p>
                                    <p>@item.Colour</p>
                                    <p><span id="total_@item.ItemId">@item.Quantity</span></p>
                                    </div>
                                    <p>$<span id="amount_@item.ItemId">@((item.Quantity * item.Price).ToString("N2"))</span></p>
                                    <div class="col-md-12">
                                          <div class="details-quantity">
                                    <div class="quantity-label">
                                        <label for="quantity-@item.ItemId">Quantity:</label>
                                    </div>
                                    <div class="controls-wrapper">
                                        <div class="quantity-controls">
                                                    <button id="removeButton_@item.ItemId" onclick="RemoveOne('@item.ItemId')">-</button>

                                                    <input type="text" id="quantity_@item.ItemId" value="@item.Quantity" readonly>

           
                                                    <button id="addButton_@item.ItemId" data-price="@item.Price" onclick="AddOne('@item.ItemId')">+</button>

                                        </div>
                                    </div>
                                </div>
                                    </div>
                                 
                                  @*   <button class="btn btn-primary mb-1" onclick="RemoveOne('@item.ItemId', '@item.ItemName')">Remove from Cart</button> *@
                                </div>
                            </div>
                        </td>
                    </tr>

                }
            </tbody>
        </table>
        <div id="customAlert" class="custom-alert">
            <div class="custom-alert-content">
                <span class="custom-alert-close" onclick="closeCustomAlert()">&times;</span>
                <p id="customAlertMessage"></p>
            </div>
        </div>
        <div class="cart-summary">
            <h3>Order Summary</h3>
            <p>Total Items: <span id="totalItems"></span></p> 
             <p>Subtotal: $<span id="grandTotal">0.00</span></p>
                <div style="display:flex;justify-content:center;">
                    <div style="display:flex;justify-content:center;width:100%">
                        <a href="@Url.Action("Checkout", "Transaction")" class="btn btn-success" style="width:100%">Proceed to checkout</a>
                    </div>
                </div>

        </div>
    

    }
    else
    {
        <p>No items found.</p>
    }


</div>

<script>
 


    function updateCartSummary() {
        var totalItems = 0;
        var grandTotal = 0.0;

        // Loop through all quantity elements and sum them up
        document.querySelectorAll('[id^="total_"]').forEach(function (element) {
            var quantity = parseInt(element.textContent) || 0;
            totalItems += quantity;

            // Get the corresponding amount element by replacing 'total_' with 'amount_'
            var amountId = element.id.replace('total_', 'amount_');
            var amountElement = document.getElementById(amountId);

            // Extract the numerical value from the amountElement's textContent
            var amount = parseFloat(amountElement.textContent.replace(/[^0-9.]/g, '')) || 0;
            grandTotal += amount;
        });

        // Update the cart summary display
        document.getElementById('totalItems').textContent = totalItems;
        document.getElementById('grandTotal').textContent = grandTotal.toFixed(2);   
      
    }

    function showCustomAlert(message, itemName) {
        document.getElementById('customAlertMessage').innerText = ` ${itemName} ${message}`;
        document.getElementById('customAlert').style.display = 'block';
    }

    function closeCustomAlert() {
        document.getElementById('customAlert').style.display = 'none';
        updateCartSummary();
        window.location.reload();
    }


    function AddOne(id) {
        var totalElement = document.getElementById('total_' + id);
        var amountElement = document.getElementById('amount_' + id);
        var addButton = document.getElementById('addButton_' + id);
        var quantityInput = document.getElementById('quantity_' + id); 

        var pricePerItem = parseFloat(addButton.getAttribute('data-price'));
        var total = parseInt(totalElement.textContent);
        if (isNaN(total)) {
            total = 0; // Start from zero if it's not a number
           
        }
        total += 1;
        totalElement.textContent = total;
        quantityInput.value = total; 
        amountElement.textContent = (total * pricePerItem).toFixed(2);
        fetch('/Transaction/AddToCart?id=' + id, {

            method: 'GET',
            headers: {
                // 'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
         
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json(); // Parse the response body as JSON
            })
            .then(data => {
                console.log("hello");


            })
            .catch(error => {
                // Handle errors
                console.error('Fetch error:', error);
            });

        updateCartSummary();

    }


   function RemoveOne(id) {
        var totalElement = document.getElementById('total_' + id);
        var amountElement = document.getElementById('amount_' + id);
        var addButton = document.getElementById('addButton_' + id);
         var quantityInput = document.getElementById('quantity_' + id); 

        var pricePerItem = parseFloat(addButton.getAttribute('data-price'));
        var total = parseInt(totalElement.textContent);
        if (isNaN(total)) {
            total = 0; // Start from zero if it's not a number
         
        }
        total -= 1;
        totalElement.textContent = total;
        quantityInput.value = total; 
        amountElement.textContent = (total * pricePerItem).toFixed(2);
        fetch('/Transaction/RemoveOneFromCart?id=' + id, {

            method: 'GET',
            headers: {
                // 'Content-Type': 'application/json',
                'X-Requested-With': 'XMLHttpRequest'
            }
         
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json(); // Parse the response body as JSON
            })
            .then(data => {
                console.log(data);


            })
            .catch(error => {
                // Handle errors
                console.error('Fetch error:', error);
            });

        updateCartSummary();

    }


    // Fetch the cart state and update the UI on page load
    document.addEventListener('DOMContentLoaded', function () {
        fetch('/Transaction/GetCartState')
            .then(response => response.json())
            .then(cartItems => {
                cartItems.forEach(item => {
                    console.log("HIIIIIII!!!")
                    var totalElement = document.getElementById('total_' + item.ItemId);
                    var amountElement = document.getElementById('amount_' + item.ItemId);
                    if (totalElement && amountElement) {
                        totalElement.textContent = item.Quantity;
                        amountElement.textContent = item.Amount.toFixed(2);
                    }
                });
                // After updating the UI with cart state, update the cart summary
                updateCartSummary();
            })
            .catch(error => {
                console.error('Error:', error);
            });
    });

</script>

