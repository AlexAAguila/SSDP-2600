@model WildPath.ViewModels.ProductVM

<style>
    #itemDetails {
        min-height: 40px;
        max-height: 400px;
        overflow-y: auto;
        resize: none;
    }

    .product-image {
        display: block;
        margin-top: 20px;
        margin-left: auto;
        margin-right: auto;
        padding: 20px;
        width: 100%;
        max-width: 400px;
        height: auto;
    }
</style>

@{
    ViewData["Title"] = "Edit Product";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Edit Product</h1>

<h4>@Model.Item.ItemName</h4>
<hr />
<div class="row">
    <div class="col-md-4">
        <form asp-action="Edit" method="post" enctype="multipart/form-data">
            <div asp-validation-summary="ModelOnly" class="text-danger"></div>
            <input type="hidden" asp-for="Item.PkItemId" />
            <div class="form-group">
                @{
                    var imageBase64 = "";
                    var imageAltText = "Product Image";
                    var image = Model.ImageStore;

                    if (image != null && image.ImageId.ToString() == Model.Item.ItemImageId)
                    {
                        imageBase64 = Convert.ToBase64String(image.Image);
                        imageAltText = image.FileName;
                    }
                    else
                    {
                        var placeholderImagePath = "~/images/placeholder.jpeg";
                        var placeholderImageUrl = Url.Content(placeholderImagePath);
                        <img src="@placeholderImageUrl" alt="Placeholder Image" class="product-image" />
                    }

                    if (!String.IsNullOrEmpty(imageBase64))
                    {
                        <img src="data:image/jpeg;base64,@imageBase64" alt="@imageAltText" class="product-image" />
                    }
                }
                <input type="file" asp-for="ImageFile" class="form-control" />
                <span class="text-muted">Optional: Choose a new image or leave it blank to keep the existing one.</span>
            </div>

            <div class="form-group">
                <label asp-for="Item.Supplier" class="control-label"></label>
                <input asp-for="Item.Supplier" class="form-control" />
                <span asp-validation-for="Item.Supplier" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Item.ItemName" class="control-label"></label>
                <input asp-for="Item.ItemName" class="form-control" />
                <span asp-validation-for="Item.ItemName" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Item.ItemDetails" class="control-label"></label>
                <textarea asp-for="Item.ItemDetails" id="itemDetails" class="form-control"></textarea>
                <span asp-validation-for="Item.ItemDetails" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Item.Price" class="control-label"></label>
                <input asp-for="Item.Price" class="form-control" />
                <span asp-validation-for="Item.Price" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Item.Stock" class="control-label"></label>
                <input asp-for="Item.Stock" class="form-control" />
                <span asp-validation-for="Item.Stock" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Item.Category" class="control-label"></label>
                <select asp-for="Item.Category" class="form-control">
                    <option value="Backpacks" selected="@(Model.Item.Category == "Backpacks")">Backpacks</option>
                    <option value="Tents" selected="@(Model.Item.Category == "Tents")">Tents</option>
                    <option value="Sleeping Gear" selected="@(Model.Item.Category == "Sleeping Gear")">Sleeping Gear</option>
                    <option value="Camping Furniture" selected="@(Model.Item.Category == "Camping Furniture")">Camping Furniture</option>
                    <option value="Accessories" selected="@(Model.Item.Category == "Accessories")">Accessories</option>
                </select>
                <span asp-validation-for="Item.Category" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Item.Weight" class="control-label"></label>
                <input asp-for="Item.Weight" class="form-control" />
                <span asp-validation-for="Item.Weight" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Item.Size" class="control-label"></label>
                <input asp-for="Item.Size" class="form-control" />
                <span asp-validation-for="Item.Size" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="Item.Colour" class="control-label"></label>
                <input asp-for="Item.Colour" class="form-control" />
                <span asp-validation-for="Item.Colour" class="text-danger"></span>
            </div>
            <div class="form-group">
                <input type="submit" value="Save" class="btn btn-primary" style="background-color:black" />
            </div>
        </form>
    </div>
</div>

<div>
    <a asp-action="Index" style="color:black">Back to List</a>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }
    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const itemDetails = document.getElementById('itemDetails');
            const maxHeight = 400;

            itemDetails.addEventListener('input', function (event) {
                this.value = this.value.replace(/(^|\n)-\s/g, '$1\u2022 ');
            });

            itemDetails.addEventListener('input', autoResize, false);

            function autoResize() {
                this.style.height = 'auto';
                let newHeight = this.scrollHeight;

                if (newHeight > maxHeight) {
                    newHeight = maxHeight;
                    this.style.overflowY = 'auto';
                } else {
                    this.style.overflowY = 'hidden';
                }

                this.style.height = newHeight + 'px';
            }

            autoResize.call(itemDetails);
        });
    </script>
}
