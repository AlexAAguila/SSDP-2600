@model WildPath.ViewModels.ProductVM
@using System.Text
@{
    ViewData["Title"] = "Details";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<style>
    html, body, .container, div {
        margin: 0;
        padding: 0;
    }

    .container {
        width: 100%;
        margin: 0 auto;
        max-width: 100%;
    }

    .details-page {
        margin: 0 auto;
        margin-bottom: 20px;
        min-height: calc(100vh - 135px);
        width: 100%;
        padding: 0;
    }

    .item-category {
        background-color: rgba(217, 217, 217, 0.5);
        color: black;
        text-align: center;
        padding: 10px 0;
        font-size: 15px;
        margin-top: -15px;
    }

    .product-image{
        display: block;
        margin-top: 20px;
        margin-left: auto;
        margin-right: auto;
        padding: 20px;
        width: 100%;
    }

    .details-name{
        font-weight: bold;
        font-size: 16px;
        margin-left: 15px;
    }

    .details-details{
        margin-left: 15px;
        margin-top: 15px;   
        font-size: 12px;
    }

    .details-details ul {
        list-style-type: disc;
        padding-left: 20px;
    }

    .details-details ul li {
        margin-bottom: 0.5em;
    }

    .details-price{
        margin-left: 15px;
        margin-top: 15px;
        font-size: 20px;
        font-weight: bold;
    }

    .details-colour,
    .details-size{
        margin-left: 15px;
        font-size: 10px;
    }

    *, *:before, *:after {
        box-sizing: border-box;
    }

    .quantity-label{
        margin-top: 15px;
        margin-left: 15px;
    }

    .controls-wrapper {
        display: flex;
        align-items: center;
        margin-left: 15px;
    }

    .add-to-cart-btn {
        background-color: #ACCAC3;
        color: #FFFFFF;
        border: none;
        margin-left: 20px;
        height: 35px;
        width: 400px;

    }

    .add-to-cart-btn:hover {
        background-color: #99b3a9;
        color: #FFFFFF;
    }

    #quantity {
        width: 30px;
        text-align: center;
    }

    .quantity-controls {
        display: flex;
        border: 1px solid #ccc;
        border-radius: 2px;
    }

    .quantity-controls button {
        background-color: transparent;
        border: none;
        padding: 0 5px;
        cursor: pointer;
    }

    .quantity-controls input {
        border: none;
        width: 40px;
        text-align: center;
    }

    .quantity-controls button:hover {
        background-color: #f0f0f0;
    }

    .quantity-controls button, .quantity-controls input {
        height: 35px;
    }

    .custom-alert {
        display: none; 
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%; 
        height: 100%; 
        overflow: auto; 
        background-color: rgba(0,0,0,0.4); 
    }

    .custom-alert-content {
        background-color: #fefefe;
        margin: 15% auto; 
        padding: 20px;
        border: 1px solid #888;
        width: 80%; 
        max-width: 500px; 
    }

    .custom-alert-close {
        color: #aaaaaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
    }

    .custom-alert-close:hover,
    .custom-alert-close:focus {
        color: #000;
        text-decoration: none;
        cursor: pointer;
    }

</style>

<div class="details-page">
    <div class="item-category">
        <span style="font-weight: bold;">@Html.DisplayFor(model => model.Item.Category)</span>
    </div>
    <div class="details-info">
        <div class="details-image">
            @{
                var imageBase64 = "";
                var imageAltText = "Product Image";
                var image = Model.ImageStore;

                if (image != null && image.ImageId.ToString() == Model.Item.ItemImageId)
                {
                    imageBase64 = Convert.ToBase64String(image.Image);
                    imageAltText = image.FileName;
                }
                else
                {
                    var placeholderImagePath = "~/images/placeholder.jpeg";
                    var placeholderImageUrl = Url.Content(placeholderImagePath);
                    <img src="@placeholderImageUrl" alt="Placeholder Image" class="product-image" />
                }

                if (!String.IsNullOrEmpty(imageBase64))
                {
                    <img src="data:image/jpeg;base64,@imageBase64" alt="@imageAltText" class="product-image"/>
                }
            }
        </div>
        <div class="details-other">
            <div class="details-name">
                @Html.DisplayFor(model => model.Item.ItemName)
            </div>
            <div class="details-details">
                @{
                    var lines = Model.Item.ItemDetails.Split(new string[] { "\n" }, StringSplitOptions.None);
                    bool inList = false;
                    StringBuilder sb = new StringBuilder();
                    foreach (string line in lines)
                    {
                        string trimmedLine = line.Trim();
                        if (trimmedLine.StartsWith("•"))
                        {
                            if (!inList)
                            {
                                sb.AppendLine("<ul>");
                                inList = true;
                            }
                            sb.AppendLine("<li>" + trimmedLine.Substring(1).Trim() + "</li>");
                        }
                        else
                        {
                            if (inList)
                            {
                                sb.AppendLine("</ul>");
                                inList = false;
                            }
                            sb.AppendLine("<p>" + trimmedLine + "</p>");
                        }
                    }
                    if (inList)
                    {
                        sb.AppendLine("</ul>");
                    }
                }
                @Html.Raw(sb.ToString())
            </div>
            <div class="details-price">
                $@Html.DisplayFor(model => model.Item.Price)
            </div>
            <div class="details-colour">
                @Html.DisplayNameFor(model => model.Item.Colour):
                @Html.DisplayFor(model => model.Item.Colour)
            </div>
            <div class="details-size">
                @Html.DisplayNameFor(model => model.Item.Size):
                @Html.DisplayFor(model => model.Item.Size)
            </div>
            <div class="details-quantity">
                <div class="quantity-label">
                    <label for="quantity">Quantity:</label>
                </div>
                <div class="controls-wrapper">
                    <div class="quantity-controls">
                        <button type="button" onclick="decreaseQuantity()">-</button>
                        <input type="text" id="quantity" value="1" readonly>
                        <button type="button" onclick="increaseQuantity()">+</button>
                    </div>
                    <button class="btn add-to-cart-btn" onclick="addToCart(@Model.Item.PkItemId, '@Model.Item.ItemName')">Add to Cart</button>
                </div>
            </div>
            <div id="customAlert" class="custom-alert">
                <div class="custom-alert-content">
                    <span class="custom-alert-close" onclick="closeCustomAlert()">&times;</span>
                    <p id="customAlertMessage"></p>
                </div>
            </div>

        </div>
    </div>
</div>

<script>
    function increaseQuantity() {
        var quantityInput = document.getElementById('quantity');
        var currentQuantity = parseInt(quantityInput.value);
        quantityInput.value = currentQuantity + 1;
    }

    function decreaseQuantity() {
        var quantityInput = document.getElementById('quantity');
        var currentQuantity = parseInt(quantityInput.value);
        if (currentQuantity > 1) {
            quantityInput.value = currentQuantity - 1;
        }
    }

    function addToCart(itemId, itemName) {
        var quantityInput = document.getElementById('quantity');
        var quantity = parseInt(quantityInput.value);

        fetch('/Transaction/AddToCart?id=' + itemId + '&quantity=' + quantity, {
            method: 'GET',
            headers: {
                'X-Requested-With': 'XMLHttpRequest'
            }
        })
            .then(response => {
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(data => {
                console.log(data);
                showCustomAlert('has been added sucessfully! ', itemName);
                quantityInput.value = 1;
            })
            .catch(error => {
                console.error('Fetch error:', error);
            });
    }

    function showCustomAlert(message, itemName) {
        document.getElementById('customAlertMessage').innerText = `🎉 ${itemName} ${message}`;
        document.getElementById('customAlert').style.display = 'block';
    }


    function closeCustomAlert() {
        document.getElementById('customAlert').style.display = 'none';
    }

</script>
