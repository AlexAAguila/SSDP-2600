@model IEnumerable<WildPath.EfModels.Transaction>

@{
    ViewData["Title"] = "Index";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<h1>Transactions</h1>

<div class="mobile-cards">
    @foreach (var item in Model)
    {
        <div class="mobile-card">
            <div><strong>Date:</strong> @Html.DisplayFor(modelItem => item.CreateTime)</div>
            <div><strong>Payer:</strong> @Html.DisplayFor(modelItem => item.PayerName)</div>
            <div><strong>Email:</strong> @Html.DisplayFor(modelItem => item.PayerEmail)</div>
            <div>
                <strong>Amount:</strong>
                @{
                    if (decimal.TryParse(item.Amount, out var amountDecimal))
                    {
                        var roundedAmount = Math.Ceiling(amountDecimal * 100) / 100;
                        @Html.Raw($"{roundedAmount:F2} {item.Currency}")
                    }
                    else
                    {
                        <span>Invalid amount</span>
                    }
                }
            </div>
            <div><strong>Method:</strong> @Html.DisplayFor(modelItem => item.PaymentMethod)</div>
            <div>
                <strong>Address:</strong> @if (item.FkAddress != null)
                {
                    <span>@item.FkAddress.Address1, @item.FkAddress.City, @item.FkAddress.Province @item.FkAddress.PostalCode</span>
                }
                else
                {
                    <span>No address available</span>
                }
            </div>
        </div>
    }
</div>
<table class="transaction-table">
    <thead>
        <tr>
            <th>
                @Html.DisplayNameFor(model => model.CreateTime)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PayerName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PayerEmail)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Amount)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Currency)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.PaymentMethod)
            </th>
            <th>
                Address
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
            <tr>
                <td>
                    @Html.DisplayFor(modelItem => item.CreateTime)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PayerName)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PayerEmail)
                </td>
                <td>
                    @{
                        if (decimal.TryParse(item.Amount, out var amountDecimal))
                        {
                            var roundedAmount = Math.Ceiling(amountDecimal * 100) / 100;
                            @roundedAmount.ToString("F2")
                        }
                        else
                        {
                            <span>Invalid amount</span>
                        }
                    }
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Currency)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PaymentMethod)
                </td>
                <td>
                    @if (item.FkAddress != null)
                    {
                        <div>@item.FkAddress.Address1</div>
                        <div>@item.FkAddress.City, @item.FkAddress.Province</div>
                        <div>@item.FkAddress.PostalCode</div>
                    }
                    else
                    {
                        <span>No address available</span>
                    }
                </td>

            </tr>
        }
    </tbody>
</table>
